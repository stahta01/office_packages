# shellcheck shell=bash
####
#
# Based on packages found at these URLs
#     https://www.archlinux.org/packages/community/x86_64/otter-browser/
#     https://github.com/msys2/MINGW-packages/blob/master/mingw-w64-PKGBUILD-templates/PKGBUILD.CMake-tarball
#
# Contributor: Tim Stahlhut <stahta01@gmail.com>
#
####
#
# Normal 64 bit build command
#   MINGW_ARCH=mingw64 makepkg-mingw -sLf
#
####

_sourcepkgver=1.0.03 # values "dev", "branch", or package version ex. "1.0.01"

_basename=otter-browser
if [[ "$_sourcepkgver" = "dev" || "$_sourcepkgver" = "branch" ]]; then
  _namesuffix="-git"
  _sourcedir=${_basename}-git
else
  _namesuffix=
  _sourcedir=${_basename}-${_sourcepkgver}
fi
pkgbase=mingw-w64-${_basename}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_basename}-nowebengine${_namesuffix}")
pkgver=1.0.03
pkgrel=1
pkgdesc="Web browser aiming to recreate the best aspects of the classic Opera (12.x) UI using Qt5 without WebEngine support (mingw-w64)"
arch=('any')
url="https://otter-browser.org/"
license=('GPL3')
conflicts=("${MINGW_PACKAGE_PREFIX}-${_basename}")
provides=("${MINGW_PACKAGE_PREFIX}-${_basename}")
depends=(
  "${MINGW_PACKAGE_PREFIX}-desktop-file-utils"
  "${MINGW_PACKAGE_PREFIX}-hicolor-icon-theme"
  "${MINGW_PACKAGE_PREFIX}-hunspell"
  "${MINGW_PACKAGE_PREFIX}-qt5"
  "${MINGW_PACKAGE_PREFIX}-qtwebkit"
)
makedepends=(
  "${MINGW_PACKAGE_PREFIX}-cmake"
  'make'
)
if [[ "$_sourcepkgver" = "dev" || "$_sourcepkgver" = "branch" ]]; then
  makedepends+=('git')
else
  makedepends+=('patch')
fi
options=('strip' 'staticlibs')
if [[ "$_sourcepkgver" = "dev" ]]; then
  source=("${_sourcedir}"::"git+https://github.com/OtterBrowser/otter-browser.git#branch=master")
elif [[ "$_sourcepkgver" = "branch" ]]; then
  source=("${_sourcedir}"::"git+https://github.com/OtterBrowser/otter-browser.git#branch=1.0.xx")
else
  source=("${_sourcedir}.tar.gz"::"https://github.com/OtterBrowser/${_basename}/archive/v$_sourcepkgver.tar.gz")
fi
source+=(
  001-Windows-comment-out-ddeexec.patch
)


if [[ "$_sourcepkgver" = "dev" || "$_sourcepkgver" = "branch" ]]; then
  sha256sums=('SKIP')
else
  sha256sums=('2b07d22a5d921ec0b3d29a680eb913c3fe0713ca7d10e37873a3802d1a5154a3')
fi
sha256sums+=('bcf0250039b315835a6aa48d9ce31347daa33396030d84024e88abae70bce14a')

# Declare global variables; begin with underscore to avoid name conflicts
if [[ "$_sourcepkgver" = "dev" || "$_sourcepkgver" = "branch" ]]; then
  _git_base_commit=
fi

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    if [[ "$_sourcepkgver" = "dev" || "$_sourcepkgver" = "branch" ]]; then
      git am --committer-date-is-author-date "${srcdir}/${_patch}"
    else
      msg2 "Applying ${_patch}"
      patch -Nbp1 -i "${srcdir}/${_patch}"
    fi
  done
}

pkgver() {
  cd "${srcdir}"/${_sourcedir} || exit
  _ver="$(cat CMakeLists.txt | grep -m3 -e MAJOR_VERSION -e MINOR_VERSION -e PATCH_VERSION | cut -d ')' -f1 | grep -o "[[:digit:]]*" | paste -sd'.')"

  if [[ "$_sourcepkgver" = "dev" || "$_sourcepkgver" = "branch" ]]; then
    printf "%s.r%s.c%s.g%s" "$_ver" $(git rev-list --count "${_git_base_commit}") $(git rev-list --count "${_git_base_commit}"..HEAD) $(git rev-parse --short "${_git_base_commit}")
  else
    printf "%s" "$_ver"
  fi
}

prepare() {
  cd "${srcdir}"/${_sourcedir} || exit

  if [[ "$_sourcepkgver" = "dev" || "$_sourcepkgver" = "branch" ]]; then
    _git_base_commit=$(git rev-parse HEAD)
  
    git config --local user.name  "nobody"
    git config --local user.email "nobody@example.com"
  fi

  apply_patch_with_msg \
    001-Windows-comment-out-ddeexec.patch
}

build() {
  [[ -d "${srcdir}"/build-${CARCH}-nowebengine ]] && rm -rf "${srcdir}"/build-"${CARCH}"-nowebengine
  mkdir -p "${srcdir}"/build-"${CARCH}"-nowebengine && cd "${srcdir}"/build-"${CARCH}"-nowebengine || exit

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
    "${MINGW_PREFIX}"/bin/cmake \
      -G'MSYS Makefiles' \
      -DCMAKE_INSTALL_PREFIX="${MINGW_PREFIX}" \
      -DENABLE_QTWEBENGINE=OFF \
      ../${_sourcedir}
  make
}

package() {
  cd "${srcdir}"/build-"${CARCH}"-nowebengine || exit
  make DESTDIR="$pkgdir" install

  # Ignore package by AppStream to avoid duplicated IDs
  echo 'X-AppStream-Ignore=true' >> "$pkgdir${MINGW_PREFIX}/share/applications/$pkgbase.desktop"
}
